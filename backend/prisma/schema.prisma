// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ProfileType {
  PUBLIC
  PRIVATE
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Profile Profile?
}

model Profile {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  bio         String?
  username    String      @unique
  avatar      String?
  profileType ProfileType @default(PUBLIC)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  User   User   @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserId String @unique @db.ObjectId

  Followers  Follow[] @relation("Follower")
  Followings Follow[] @relation("Following")

  Threads Thread[]

  Likes Like[]

  Quotes Thread[] @relation("Quote")

  Bookmarks Bookmark[]
}

model Follow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Follower   Profile @relation("Follower", fields: [FollowerId], references: [id])
  FollowerId String  @db.ObjectId

  Following   Profile @relation("Following", fields: [FollowingId], references: [id])
  FollowingId String  @db.ObjectId
}

model Thread {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  picture   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  Creator   Profile @relation(fields: [CreatorId], references: [id])
  CreatorId String  @db.ObjectId

  Likes Like[]

  ParentThread   Thread?  @relation("ParentThread", fields: [ParentThreadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ParentThreadId String?  @db.ObjectId
  ChildThreads   Thread[] @relation("ParentThread")

  QuotedBy   Profile? @relation("Quote", fields: [QuotedById], references: [id])
  QuotedById String?  @db.ObjectId

  // Which thread is this thread a repost of?
  RepostTo   Thread?  @relation("RepostThread", fields: [RepostToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  RepostToId String?  @db.ObjectId
  RepostFrom Thread[] @relation("RepostThread")

  Bookmarks Bookmark[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Thread   Thread @relation(fields: [ThreadId], references: [id])
  ThreadId String @db.ObjectId

  Profile   Profile @relation(fields: [ProfileId], references: [id])
  ProfileId String  @db.ObjectId
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Thread   Thread @relation(fields: [ThreadId], references: [id])
  ThreadId String @db.ObjectId

  Profile   Profile @relation(fields: [ProfileId], references: [id])
  ProfileId String  @db.ObjectId
}